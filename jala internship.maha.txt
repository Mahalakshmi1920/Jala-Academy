PYTHON BASICS
# -*- coding: utf-8 -*-
"""Copy of Untitled13.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jemQ9VP0H4gs7jOYIPoLMWrgGPYoU5kZ
""" 
a='My name is Mahalakshmi'
print(a)


#single line comment
a=1
b=2
c=a+b
print(c)


'''
python is an object oriented programming language
this is multi line comment
'''


a=20
print(type(a))
a=True
print(type(a))
a="jala"
print(type(a))
a=12.9
print(type(a))


a=19
def variable():
  print("Inside function",a)

variable()
print("Outside function",a)


def variable(): 

  #local variable
  a='Jala academy'
  print(a)

variable()


OPERATORS
# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hRCcVcg-xevJQe_jL5tZCxWryJFvJex5
"""

a=20
b=15
print(a+b)
print(a-b)
print(a*b)
print(a/b)

a=4
a+=1
print(a)
b=7
b-=1
print(b)

a=int(input("Enter a number:"))
b=int(input("Enter b number:"))
if a==b:
  print("Both are equal")
else:
  print("No")

a=int(input("Enter a number:"))
b=int(input("Enter b number:"))
if a<b:
  print("A is lesser than B")
else:
  print("A is not lesser than B")

a=int(input("Enter a number:"))
b=int(input("Enter b number:"))
if a>b:
  print("A is greater than B")
else:
  print("A is not greater than B")

a=7
b=8
print(a<=b)
print(a>=b)

a=(12,45,56,78)
print(max(a))

a=(12,45,56,78)
print(min(a))

 
strings
# -*- coding: utf-8 -*-
"""Untitled15.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Yl2CusJpO4rDJXLOIrATcC53onQmUo2K
"""

print("Jala Academy")
print('Jala Academy')
print("'Jala Academy'")

a="Jala"
b="Academy"
c=a+" "+b
print(c)

a="Jala Academy"
print(len(a))

myString="Jala Academy"
print(myString[0:4])
print(myString[5:12])
print(myString[:6])

myString="Jala Academy"
print(myString.index("J"))
print(myString.index("e"))
print(myString.index("m"))

import re

pattern='^a...s$'
string='abaas'
result=re.match(pattern,string)

if result:
  print("Matched")
else:
  print("Not Matched")

a='Jala'
b='Jala'
if a==b:
  print("a and b are equal")
else:
  print("a and b are not equal")

a="Jala academy"
b=a.startswith("Jala")
print(b)
b=a.endswith("academy")
print(b)

a="How are you"
x=a.replace("are","is")
print(x)

a="  Jala "
x=a.strip()
print("I am doing",a,"internship")

name1,name2,name3=input("Enter 3 names:").split()
print("Name 1:",name1)
print("Name 2:",name2)
print("Name 3:",name3)

a=20
print(type(a))
a=str(a)
print(a)

a="Jala Academy"
print(a.upper())
print(a.lower())

loops

# -*- coding: utf-8 -*-
"""Untitled17.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Lf8PlHvtr0ngZUkpaY0KOkR-AH8jRe0h
"""

for i in range(10):
  print("Bright IT Career")

num1=50
num2=10*5
if num1 == num2:
  print("equal")
else:
  print("not equal")  
num1=45
num2=76
if num1 != num2:
  print("not equal")
else:
  print("equal")

a=int(input("Enter the number:"))
if a % 2==0:
  print("even")
else:
  print("odd")

i=1
while(i<=20):
  print(i)
  i+=1

a=int(input("Enter first number: "))
b=int(input("Enter second number: "))
c=int(input("Enter third number: "))
if a>b and a>c:
  print("A is largest")
if b>a and b>c:
  print("B is largest")
else:
  print("C is largest")

i=12
while(i<20):
  print(i)
  i+=2

i=1 
while True:
  print(i)
  i+=1
  if i>10:
    break

num=int(input("Enter a number: "))
sum=0
temp=num
while temp > 0:
  digit=num % 10
  sum=digit**3
  temp//=10
if num==sum:
  print(num,"is an armstrong number")
else:
  print(num,"is not an armstrong number")

num=56
if num > 1:
  for i in range(2,int(num/2)):
    if num % i==0:
      print(num,"is a prime number")
      break
    else:
      print(num,"is not a prime number")

a=input("Enter the string: ")
if(a==a[::-1]):
   print("The string is a palindrome")
else:
   print("The string is not a palindrome")

a=int(input("Enter a number:"))
if a % 2==0:
  print("The given number is even")
else:
  print("The given number is odd")

def get_gender(self):
    if self.use_url==none:
        print("i am anonymous use.")
        return'unknown'
    else:
        if self.soup==none:
            self.parser()
            soup=self.soup
            try:
                gender=str(soup.find("span",class_="itemgender").i)
                if(gender=='<iclass="icon icon-profile-female"></i>'):
                    return'female'
                else:
                    return'male'
            except:
                return'unknown'

arrays

# -*- coding: utf-8 -*-
"""Untitled19.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bZl2lu8MI8ufX7pfbIN3ONFuWEzhZmkm
"""

lst = []
num = int(input("Enter the size of the array: "))
print("Enter array element: ")
for n in range(num):
  numbers = int(input())
  lst.append(numbers)
print("sum", sum(lst))

def cal_average(num):
    sum_num = 0
    #Loop through the array to average value of elements 
    for i in num:
        sum_num = sum_num + i          

    avg = sum_num / len(num)
    return avg

print("The average is", cal_average([10,21,32,43,54]))

arr = [1,3,5,3,1,2,6,5,3,8,6,9]

index = arr.index(6)
print("Index of 6: ",index)

index = arr.index(1)
print("Index of 1: ",index)

index = arr.index(9)
print("Index of 9: ",index)

arr = [4,5,45,40,50]
for num in arr:
    if num == 5:
        print("Element exist")

arr = [44,55,0,15,19,5,4]

#removing a specific element from an array
arr.remove(0)
print(arr)

arr = ['k','a','s','h','i']
arr1 = [] 
arr1 = arr.copy() 
print(arr1)

arr = [101,303,404,505,606,707,808,909]
arr.insert(1,202) #insert 202 at index 1 in arr
print(arr)

arr = [100,3,3000,20,500,9999,10000,10003]

#minimum value of array
minposition = arr.index(min(arr))
print ("The minimum is at position:", minposition)

#maximum value of array
maxposition = arr.index(max(arr))
print ("The maximum is at position::", maxposition)

arr = [9,8,7,6,5]
arr.reverse() 
print(arr)

arr = [21,11,31,13,11]
#Using loop to check duplicate values in array
for i in range(0,len(arr)):
    for k in range(i + 1,len(arr)):
        if arr[i] == arr[k]:
            print("Duplicate element in given array:",arr[k])

arr = ['k','a','s','h','i']
arr1 = ['s','h','g']
print("Common values in given arrays:",set(arr).intersection(arr1))

arr = [11,22,33,11,44,55]
finalarr = [] #empty array
#Using loop to remove duplicated elements
for i in arr:
    if i not in finalarr:
        finalarr.append(i)
print(finalarr)

arr = [101,404,202,909,606,505,808,303,707]
arr.sort() #Sorting in ascending order. 
print("Second largest number:",arr[-2])

arr = [1,2,3,4,5,6,7,8,9]
evennumbers = 0
oddnumbers = 0
#using loop to find even and odd numbers in array
for i in arr:
    if i % 2 == 0:
        evennumbers += 1
    else:
        oddnumbers += 1 
print("Even Numbers in given array:",evennumbers)
print("Odd Numbers in given array:",oddnumbers)

arr = [10,6,11,13,14]
arr.sort() #Sorting in ascending order
print("Diffrence of largest and smallest value:",arr[4]-arr[0])

arr = [1,12,19,23,33,54]
#using loop to find if array contains specific elements
for i in arr:
    if i == 12:
        print("Exist in array")
    if i == 23:
        print("Exist in array")

static

# -*- coding: utf-8 -*-
"""Untitled20.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WekgpnttrH2TIxQ0fiu4qrhrEBseTIjL
"""

staticVariable = 9 
print(Python.staticVariable)

instance = Python()
print(instance.staticVariable)

Python.staticVariable = 12
print(Python.staticVariable)

instance.staticVariable = 15
print(instance.staticVariable)
print(Python.staticVariable)

inheritance

# -*- coding: utf-8 -*-
"""Untitled21.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eoJ7bhzTuHFZtwatRhhVcycOSKZfz-aI
"""

class A():  
    def display(dp):
        print("Display Inside class A ")
 # class A show method    
    def show(self):
        print("Show Inside class A")

class B (A): 
    def print(pt):
        print("Print Inside class B")    
    # class B show method
    def show(self):
        print("Show Inside class B")

class C (B): 
          
    # class C show method
    def show(self):
        print("Show Inside class C ")         
    
# Driver code 
s = A()
s.display()
k= B()
k.print()
g = C()   
g.show()

access modifiers

# -*- coding: utf-8 -*-
"""Untitled22.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13QVI7xYNyy-WJJT2R9YZcSfSPe5uWJKc
"""

class Super:
     
     # public data member
     var1 = None
 
     # protected data member
     _var2 = None
      
     # private data member
     __var3 = None
     
     # constructor
     def __init__(self, var1, var2, var3): 
          self.var1 = var1
          self._var2 = var2
          self.__var3 = var3
     
    # public member function  
     def displayPublicMembers(self):
  
          # accessing public data members
          print("Public Data Member: ", self.var1)
        
     # protected member function  
     def _displayProtectedMembers(self):
  
          # accessing protected data members
          print("Protected Data Member: ", self._var2)
      
     # private member function  
     def __displayPrivateMembers(self):
  
          # accessing private data members
          print("Private Data Member: ", self.__var3)
 
     # public member function
     def accessPrivateMembers(self):    
           
          # accessing private member function
          self.__displayPrivateMembers()
  
# derived class
class Sub(Super):
  
      # constructor
       def __init__(self, var1, var2, var3):
                Super.__init__(self, var1, var2, var3)
           
      # public member function
       def accessProtectedMembers(self):
                 
                # accessing protected member functions of super class
                self._displayProtectedMembers()
  
# creating objects of the derived class    
obj = Sub("KG", 5 , "KG !")
 
# calling public member functions of the class
obj.displayPublicMembers()
obj.accessProtectedMembers()
obj.accessPrivateMembers()
 
# Object can access protected member
print("Object is accessing protected member:", obj._var2)

abstract class

# -*- coding: utf-8 -*-
"""Untitled23.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QteB6bk9v155IE-1PDG0XYqFmaiLWiN4
"""

from abc import ABC, abstractmethod
 
class Polygon(ABC): #base class / super class
 
    @abstractmethod
    def noofsides(self):
        pass
class Triangle(Polygon): #subclass
 
    # overriding abstract method
    def noofsides(self):
        print("Triangle: I have 3 sides")
 
class Pentagon(Polygon): #subclass
 
    # overriding abstract method
    def noofsides(self):
        print("Pentagon: I have 5 sides")
 
class Hexagon(Polygon): #subclass
 
    # overriding abstract method
    def noofsides(self):
        print("Hexagon: I have 6 sides")
R = Triangle()
R.noofsides()
R = Pentagon()
R.noofsides()
 
K = Hexagon()
K.noofsides()

Packages

# -*- coding: utf-8 -*-
"""Untitled24.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ypbUKiLyyfNKl--QgYBcKSGAX1BSJNDE
"""

class Student:
    def _init_(self, student):
        self.name = student['name']
        self.gender = student['gender']
        self.year = student['year']

def get_student_details(self):
      return f"Name: {self.name}\nGender: {self.gender}\nYear: {self.year}"


# faculty.py
class Faculty:

    def _init_(self, faculty):
        self.name = faculty['name']
        self.subject = faculty['subject']

    def get_faculty_details(self):
        return f"Name: {self.name}\nSubject: {self.subject}"
    # testing.py
# importing the Student and Faculty classes from respective files
    from student import Student
    from faculty import Faculty

# creating dicts for student and faculty
student_dict = {'name' : 'John', 'gender': 'Male', 'year': '3'}
faculty_dict = {'name': 'Emma', 'subject': 'Programming'}

# creating instances of the Student and Faculty classes
student = Student(student_dict)
faculty = Faculty(faculty_dict)

# getting and printing the student and faculty details
print(student.get_student_details())
print()
print(faculty.get_faculty_details())

files

# -*- coding: utf-8 -*-
"""Untitled25.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XK5filWQ3BKmaGIYZCz2WhpYlXFSWNMz
"""

file1 = open("MyFile.txt","a")
file2 = open(r"D:\Text\MyFile2.txt","w+")

with open("test.txt",'w',encoding = 'utf-8') as f:
   f.write("my first file\n")
   f.write("This file\n\n")
   f.write("contains three lines\n")

file1 = open("MyFile.txt","a")
data = file1.read()
print(data)
print()

import struct

thefile = open('somebinfile', 'r+b')
record_size = struct.calcsize(format_string)

thefile.seek(record_size * record_number)
buffer = thefile.read(record_size)
fields = list(struct.unpack(format_string, buffer))

# Perform computations, suitably modifying fields, then:

buffer = struct.pack(format_string, *fields)
thefile.seek(record_size * record_number)
thefile.write(buffer)

thefile.close(  )

f=open("GFG.txt","r")
f.seek(20)
print(f.tell())
print(f.readline())
f.close

>>> import os
>>> os.access('my_file', os.R_OK) # Check for read access
True
>>> os.access('my_file', os.W_OK) # Check for write access
True
>>> os.access('my_file', os.X_OK) # Check for execution access
False
>>> os.access('my_file', os.F_OK) # Check for existance of file

Constructors

# -*- coding: utf-8 -*-
"""Untitled27.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tFff08VrA6jIDMdIQ0BlFeZ3krHH0xTy
"""

from unicodedata import name


class A:
    # default constructor
    def __init__(self):
     self.name = "Kashish"
     # a method for printing data members
    def print_A(self):
        print(self.name)
# creating object of the class
obj = A()
# calling the instance method using the object obj
obj.print_A()

class B(A):
    def __init__(self):
     self.name = "KG"
    def print_B(self):
        print(self.name)
obj1 = B()
obj1.print_B()

class C:
    # public data member
    name = None

     # protected data members
    _roll = None 

     # private data member
    __branch = None

    # constructor
    def __init__(self,name,roll,branch):
        self.name = name  
        self._roll = roll
        self.__branch = branch  
    def dsiplayName(self):
        print("Name:",self.name)
        # protected member function
    def _displayRoll(self):
         # accessing protected data members
        print("Roll:",self._roll)

         # private member function 
    def __displayBranch(self):
        # accessing private data members
        print("Branch:",self.__branch)

         # public member function
    def access__displayBranch(self):     
          # accessing private member function
        self.__displayBranch()

class D(C):
    def __init__(self,name, roll, branch):
        super().__init__(name,roll, branch)
      # public member function
    def access_displayRoll(self):            
         # accessing protected member functions of super class
        self._displayRoll()

# creating objects of the derived class    
obj = D("Kashish", 5 , "CSE")
# calling public member functions of the class  
obj.dsiplayName()
obj.access_displayRoll()
obj.access__displayBranch()


method overloading

# -*- coding: utf-8 -*-
"""Untitled29.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sVQIyWEgJcfUUWia201WkoFGopY5P73N
"""

class Addition:
	# first sum for 2 params
	def my_sum(self, a, b):
		return a + b
	
	# second overloaded sum for 3 params
	def my_sum(self, a, b, c):
		return a + b + c
obj = Addition()
obj.my_sum(value1, value2)  # for first func
obj.my_sum(value1, value2, value3)  # for second func
print(obj.my_sum(3, 4))
print(obj.my_sum(3, 4, 5))

from multidispatch import dispatch  # importing the module

@dispatch(int, int)  # using the dispatch decorator to define two parameters as int
def mul(a, b):
    return a * b

@dispatch(int, int, int)  # defining 3 parameters as int
def mul(a, b, c):
    return a * b * c
	
@dispatch(float, float, float)  # defining 3 parameters as float
def mul(a, b, c):
    return a * b * c
print(mul(2.1, 3.4, 5.6))
print(mul(3, 4))
print(mul(2, 3, 4))

class MyClass:
    """"""

    #----------------------------------------------------------------------
    def _init_(self):
        """Constructor"""
    def my_method(self,parameter_A_that_Must_Be_String):
        print parameter_A_that_Must_Be_String

    def my_method(self,parameter_A_that_Must_Be_String,parameter_B_that_Must_Be_String):
        print parameter_A_that_Must_Be_String
        print parameter_B_that_Must_Be_String

    def my_method(self,parameter_A_that_Must_Be_String,parameter_A_that_Must_Be_Int):
        print parameter_A_that_Must_Be_String *

exceptions

# -*- coding: utf-8 -*-
"""Untitled30.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_J4TGRa4bcaLuFQpLbGVn1IuGAlbNSej
"""

a = [1, 2, 3]
try:
    print ("Second element = ",a[1])
 
    # Throws error since there are only 3 elements in array
    print ("Fourth element = ",a[3])
    
except:
    print ("An error occurred")

print()

b = [3,2,1]
try:
    a == b
except:
    print("They are not equal")
else:
    print("Both Equal") 

print()

try:
    k = 5/0
    print(k)
except ZeroDivisionError:
    print("Can't divide by zero")
finally:
    print('This is always executed')

dictionary

# -*- coding: utf-8 -*-
"""Untitled31.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11O5JI2kWrtiCb8oqipzSBYqQskRxNvKN
"""

#Creating dictionary
Dict = dict([(1,'Kashish'), (2,'Kritika'), (3,'Aastha'), (4,'Vaishali'), (5,'Muskan')])
print("Dictionary with each item as a pair:",Dict) #printing dictionary

#adding element in dictionary
Dict[6] = 'Nitya'
print("\n Dictionary with new item added:",Dict)

#updating values in dictionary
Dict[3] = 'Navdisha'
print("\n Dictionary with updated values:",Dict)

print("\n Accessing one value in Dictionary:",Dict[1])

#deleting value from drictionary
del Dict[6]
print("\n Delete a value from a Dictionary:",Dict)

#creating a nested dictionary
Dict1 = {1: 'Kashish', 2: 'Kritika',
        3:{'Age' : 18, 'Branch' : 'CSE', 'Year' : 'Third Year'}}
print("\n Nested loop Dictionary:",Dict1)

print("\n Accessing an element of a Nested Dictionary:",Dict1[2])










